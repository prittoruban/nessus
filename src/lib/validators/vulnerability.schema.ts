import { z } from "zod";

/**
 * Vulnerability data validation schemas
 */

// CSV Row schema for parsing uploaded files
export const csvRowSchema = z.object({
  "Plugin ID": z.string(),
  "CVE": z.string().optional(),
  "CVSS": z.string().optional(),
  "Risk": z.string().optional(),
  "Host": z.string(),
  "Protocol": z.string().optional(),
  "Port": z.string().optional(),
  "Name": z.string(),
  "Synopsis": z.string().optional(),
  "Description": z.string().optional(),
  "Solution": z.string().optional(),
  "See Also": z.string().optional(),
  "Plugin Output": z.string().optional(),
}).passthrough(); // Allow additional fields

// Vulnerability creation schema
export const createVulnerabilitySchema = z.object({
  report_id: z.string().uuid(),
  plugin_id: z.string().optional(),
  cve: z.string().nullable().optional(),
  cvss_score: z.number().nullable().optional(),
  ip_address: z.string(),
  protocol: z.enum(['TCP', 'UDP']).nullable().optional(),
  port: z.number().nullable().optional(),
  vuln_name: z.string(),
  plugin_name: z.string().optional(),
  synopsis: z.string().nullable().optional(),
  description: z.string().nullable().optional(),
  solution: z.string().nullable().optional(),
  severity: z.enum(['critical', 'high', 'medium', 'low', 'info']),
  is_zero_day: z.boolean().optional(),
  iteration: z.number().optional(),
});

// Complete vulnerability schema (with database fields)
export const vulnerabilitySchema = createVulnerabilitySchema.extend({
  id: z.string().uuid(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
});

// Query schema for filtering vulnerabilities
export const vulnerabilityQuerySchema = z.object({
  page: z.number().min(1).default(1),
  limit: z.number().min(1).max(100).default(10),
  severity: z.string().default("all"),
  report_id: z.string().uuid().optional(),
  search: z.string().optional(),
});

// Type exports
export type CsvRow = z.infer<typeof csvRowSchema>;
export type CreateVulnerability = z.infer<typeof createVulnerabilitySchema>;
export type Vulnerability = z.infer<typeof vulnerabilitySchema>;
export type VulnerabilityQuery = z.infer<typeof vulnerabilityQuerySchema>;
