import { z } from "zod";

/**
 * Enhanced Vulnerability data validation schemas
 */
export const vulnerabilitySchema = z.object({
  id: z.string().uuid().optional(),
  
  // Relationships
  report_id: z.string().uuid(),
  host_id: z.string().uuid().optional(),
  
  // Vulnerability Identification
  cve: z.string().optional().default("N/A"),
  plugin_id: z.string().optional(),
  plugin_name: z.string().optional(),
  vuln_name: z.string().min(1, "Vulnerability name is required"),
  
  // Risk Assessment
  severity: z.enum(["critical", "high", "medium", "low", "info"], {
    message: "Severity must be critical, high, medium, low, or info"
  }),
  cvss_score: z.number().min(0).max(10).optional(),
  risk_priority: z.enum(["P1", "P2", "P3", "P4", "P5"]).optional(),
  
  // Technical Details
  description: z.string().optional(),
  solution: z.string().optional(),
  synopsis: z.string().optional(),
  
  // Host Information
  ip_address: z.string().min(1, "IP address is required"),
  port: z.number().optional(),
  protocol: z.enum(["TCP", "UDP"]).optional(),
  service_name: z.string().optional(),
  
  // Classification
  is_zero_day: z.boolean().default(false),
  exploitability: z.enum(["Easy", "Moderate", "Difficult"]).optional(),
  
  // Iteration tracking
  iteration: z.number().min(1).default(1),
  
  // Timestamps
  first_detected: z.string().datetime().optional(),
  last_seen: z.string().datetime().optional(),
  created_at: z.string().datetime().optional(),
  updated_at: z.string().datetime().optional(),
});

export const createVulnerabilitySchema = vulnerabilitySchema.omit({
  id: true,
  created_at: true,
  updated_at: true,
  first_detected: true,
  last_seen: true,
});

export const updateVulnerabilitySchema = vulnerabilitySchema.partial();

/**
 * Enhanced CSV upload validation
 */
export const csvRowSchema = z.object({
  "IP Address": z.string().optional(),
  "IP": z.string().optional(),
  "Host": z.string().optional(),
  "CVE": z.string().optional(),
  "Plugin ID": z.string().optional(),
  "Severity": z.string().optional(),
  "Risk": z.string().optional(),
  "Plugin Name": z.string().optional(),
  "Name": z.string().optional(),
  "Description": z.string().optional(),
  "Synopsis": z.string().optional(),
  "Solution": z.string().optional(),
  "Port": z.string().optional(),
  "Protocol": z.string().optional(),
  "Service": z.string().optional(),
  "CVSS": z.string().optional(),
  "CVSS Score": z.string().optional(),
});

/**
 * Enhanced Query parameters validation
 */
export const vulnerabilityQuerySchema = z.object({
  page: z.coerce.number().min(1).default(1),
  limit: z.coerce.number().min(1).max(100).default(20),
  severity: z.enum(["all", "critical", "high", "medium", "low", "info"]).default("all"),
  search: z.string().optional(),
  sort: z.enum(["created_at", "severity", "ip_address", "cvss_score"]).default("created_at"),
  order: z.enum(["asc", "desc"]).default("desc"),
  report_id: z.string().uuid().optional(),
  host_id: z.string().uuid().optional(),
  iteration: z.coerce.number().optional(),
  is_zero_day: z.coerce.boolean().optional(),
});

/**
 * Report Host schema
 */
export const reportHostSchema = z.object({
  id: z.string().uuid().optional(),
  report_id: z.string().uuid(),
  ip_address: z.string().min(1, "IP address is required"),
  hostname: z.string().optional(),
  status: z.enum(["Completed", "Failed", "Partial"]).default("Completed"),
  iteration: z.number().min(1),
  
  // Aggregation counts
  critical_count: z.number().min(0).default(0),
  high_count: z.number().min(0).default(0),
  medium_count: z.number().min(0).default(0),
  low_count: z.number().min(0).default(0),
  info_count: z.number().min(0).default(0),
  total_count: z.number().min(0).default(0),
  zero_day_count: z.number().min(0).default(0),
  
  created_at: z.string().datetime().optional(),
  updated_at: z.string().datetime().optional(),
});

export const createReportHostSchema = reportHostSchema.omit({
  id: true,
  created_at: true,
  updated_at: true,
  critical_count: true,
  high_count: true,
  medium_count: true,
  low_count: true,
  info_count: true,
  total_count: true,
  zero_day_count: true,
});

/**
 * Organization schema
 */
export const organizationSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string().min(1, "Organization name is required"),
  industry: z.string().optional(),
  contact_person: z.string().optional(),
  contact_email: z.string().email().optional(),
  contact_phone: z.string().optional(),
  address: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  total_reports: z.number().min(0).default(0),
  last_scan_date: z.string().date().optional(),
  created_at: z.string().datetime().optional(),
  updated_at: z.string().datetime().optional(),
});

// Export types
export type Vulnerability = z.infer<typeof vulnerabilitySchema>;
export type CreateVulnerability = z.infer<typeof createVulnerabilitySchema>;
export type UpdateVulnerability = z.infer<typeof updateVulnerabilitySchema>;
export type VulnerabilityQuery = z.infer<typeof vulnerabilityQuerySchema>;
export type CsvRow = z.infer<typeof csvRowSchema>;
export type ReportHost = z.infer<typeof reportHostSchema>;
export type CreateReportHost = z.infer<typeof createReportHostSchema>;
export type Organization = z.infer<typeof organizationSchema>;
