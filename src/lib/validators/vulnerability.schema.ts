import { z } from "zod";

/**
 * Vulnerability data validation schemas
 */
export const vulnerabilitySchema = z.object({
  id: z.string().uuid().optional(),
  report_id: z.string().uuid().optional(), // ðŸ†• Add report_id field
  ip_address: z.string().min(1, "IP address is required"), // More flexible IP validation
  cve: z.string().optional().default("N/A"), // Allow empty CVE, default to "N/A"
  severity: z.enum(["high", "medium", "low", "info"], {
    message: "Severity must be high, medium, low, or info"
  }),
  plugin_name: z.string().optional(),
  description: z.string().optional(),
  created_at: z.string().datetime().optional(),
});

export const createVulnerabilitySchema = vulnerabilitySchema.omit({
  id: true,
  created_at: true,
});

export const updateVulnerabilitySchema = vulnerabilitySchema.partial();

/**
 * CSV upload validation
 */
export const csvRowSchema = z.object({
  "IP Address": z.string().optional(),
  "IP": z.string().optional(),
  "Host": z.string().optional(),
  "CVE": z.string().optional(),
  "Plugin ID": z.string().optional(),
  "Severity": z.string().optional(),
  "Risk": z.string().optional(),
  "Plugin Name": z.string().optional(),
  "Name": z.string().optional(),
  "Description": z.string().optional(),
  "Synopsis": z.string().optional(),
});

/**
 * Query parameters validation
 */
export const vulnerabilityQuerySchema = z.object({
  page: z.coerce.number().min(1).default(1),
  limit: z.coerce.number().min(1).max(100).default(20),
  severity: z.enum(["all", "high", "medium", "low", "info"]).default("all"),
  search: z.string().optional(),
  sort: z.enum(["created_at", "severity", "ip_address"]).default("created_at"),
  order: z.enum(["asc", "desc"]).default("desc"),
  report_id: z.string().uuid().optional(), // ðŸ†• Add report_id filter
});

/**
 * File upload validation
 */
export const fileUploadSchema = z.object({
  file: z.instanceof(File, { message: "File is required" })
    .refine((file) => file.size <= 10 * 1024 * 1024, "File size must be less than 10MB")
    .refine((file) => file.type === "text/csv" || file.name.endsWith('.csv'), "File must be a CSV"),
});

// Export types
export type Vulnerability = z.infer<typeof vulnerabilitySchema>;
export type CreateVulnerability = z.infer<typeof createVulnerabilitySchema>;
export type UpdateVulnerability = z.infer<typeof updateVulnerabilitySchema>;
export type VulnerabilityQuery = z.infer<typeof vulnerabilityQuerySchema>;
export type CsvRow = z.infer<typeof csvRowSchema>;
